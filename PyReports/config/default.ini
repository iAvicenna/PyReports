; default configuration file for html scripts and styles. This is not meant to
; be edited by the user. Unless _USE_DEFAULT is set to True by default_config,
; the default.ini is read first and then its values are updated by reading
; user.ini. So for changes, the user should edit user.ini

;Parts if this content (table script and table styles) is licensed according
;to the W3C Software License at
;https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document

[CONFIG]
type =
        default

[SCRIPTS]
code script = <script src="https://cdn.jsdelivr.net/gh/google/code-prettify@master/loader/run_prettify.js"></script>

tab script =
	    <script>
	    function open_tab(evt, id, name) {
            var i, tabcontent, tablinks;
            tabcontent = document.getElementsByName(name);

            for (i = 0; i < tabcontent.length; i++) {
                tabcontent[i].style.display = "none";
            }

            tablinks = document.getElementsByClassName("tablinks");

            for (i = 0; i < tablinks.length; i++) {
                tablinks[i].className = tablinks[i].className.replace(" active", "");
            }

            document.getElementById(id).style.display = "block";

            evt.currentTarget.className += " active";
          }

        </script>

	    <script>
	    // If acmaps in tabs are set to display:none initally then they are not
	    // rendered correctly so that is why initially every tab is set to
	    // display:block and then everything is closed after rendering and only
	    // first tabs are set to open. This function achieves that.

        function open_defaults( name) {
            var i, tabcontent, tablinks, buttons;

            // Close all open tabs
            tabcontent = document.getElementsByClassName(name);

            for (i = 0; i < tabcontent.length; i++) {
                tabcontent[i].style.display = "none";
            }

            // Get the element with name="default_open" and click on it
            buttons = document.getElementsByName('default_open');
            for (i=0; i< buttons.length; i++){
                buttons[i].click()
            }

        }
        </script>

        <script>
	    function open_all_tabs(evt,  name) {
            var i, tabcontent, tablinks;
            tabcontent = document.getElementsByName(name);

            for (i = 0; i < tabcontent.length; i++) {
                tabcontent[i].style.display = "block";
            }
        }
	    </script>


tex script =
	    <script type="text/x-mathjax-config">
	        MathJax.Hub.Config({tex2jax: {inlineMath: [['$','$']]}});
	    </script>

	    <script type="text/javascript"
	        src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
	    </script>

fold script =

        <script>
            function click_fold(item) {
                item.classList.toggle("active");
                var content = item.nextElementSibling;

                if (content.style.maxHeight){
                  content.style.maxHeight = null;
                } else {
                  content.style.maxHeight = content.scrollHeight + "px";
                }
            }
        </script>

table script =

      <script>
      class SortableTable {
        constructor(tableNode) {
          this.tableNode = tableNode;

          this.columnHeaders = tableNode.querySelectorAll('thead th');

          this.sortColumns = [];

          for (var i = 0; i < this.columnHeaders.length; i++) {
            var ch = this.columnHeaders[i];
            var buttonNode = ch.querySelector('button');
            if (buttonNode) {
              this.sortColumns.push(i);
              buttonNode.setAttribute('data-column-index', i);
              buttonNode.addEventListener('click', this.handleClick.bind(this));
            }
          }

          this.optionCheckbox = document.querySelector(
            'input[type="checkbox"][value="show-unsorted-icon"]'
          );

          if (this.optionCheckbox) {
            this.optionCheckbox.addEventListener(
              'change',
              this.handleOptionChange.bind(this)
            );
            if (this.optionCheckbox.checked) {
              this.tableNode.classList.add('show-unsorted-icon');
            }
          }
        }

        setColumnHeaderSort(columnIndex) {
          if (typeof columnIndex === 'string') {
            columnIndex = parseInt(columnIndex);
          }

          for (var i = 0; i < this.columnHeaders.length; i++) {
            var ch = this.columnHeaders[i];
            var buttonNode = ch.querySelector('button');
            if (i === columnIndex) {
              var value = ch.getAttribute('aria-sort');
              if (value === 'descending') {
                ch.setAttribute('aria-sort', 'ascending');
                this.sortColumn(
                  columnIndex,
                  'ascending',
                  ch.classList.contains('num')
                );
              } else {
                ch.setAttribute('aria-sort', 'descending');
                this.sortColumn(
                  columnIndex,
                  'descending',
                  ch.classList.contains('num')
                );
              }
            } else {
              if (ch.hasAttribute('aria-sort') && buttonNode) {
                ch.removeAttribute('aria-sort');
              }
            }
          }
        }

        sortColumn(columnIndex, sortValue, isNumber) {
          function compareValues(a, b) {
            if (sortValue === 'ascending') {
              if (a.value === b.value) {
                return 0;
              } else {
                if (isNumber) {
                  return a.value - b.value;
                } else {
                  return a.value < b.value ? -1 : 1;
                }
              }
            } else {
              if (a.value === b.value) {
                return 0;
              } else {
                if (isNumber) {
                  return b.value - a.value;
                } else {
                  return a.value > b.value ? -1 : 1;
                }
              }
            }
          }

          if (typeof isNumber !== 'boolean') {
            isNumber = false;
          }

          var tbodyNode = this.tableNode.querySelector('tbody');
          var rowNodes = [];
          var dataCells = [];

          var rowNode = tbodyNode.firstElementChild;

          var index = 0;
          while (rowNode) {
            rowNodes.push(rowNode);
            var rowCells = rowNode.querySelectorAll('th, td');
            var dataCell = rowCells[columnIndex];

            var data = {};
            data.index = index;
            data.value = dataCell.textContent.toLowerCase().trim();
            if (isNumber) {
              data.value = parseFloat(data.value);
            }
            dataCells.push(data);
            rowNode = rowNode.nextElementSibling;
            index += 1;
          }

          dataCells.sort(compareValues);

          // remove rows
          while (tbodyNode.firstChild) {
            tbodyNode.removeChild(tbodyNode.lastChild);
          }

          // add sorted rows
          for (var i = 0; i < dataCells.length; i += 1) {
            tbodyNode.appendChild(rowNodes[dataCells[i].index]);
          }
        }

        /* EVENT HANDLERS */

        handleClick(event) {
          var tgt = event.currentTarget;
          this.setColumnHeaderSort(tgt.getAttribute('data-column-index'));
        }

        handleOptionChange(event) {
          var tgt = event.currentTarget;

          if (tgt.checked) {
            this.tableNode.classList.add('show-unsorted-icon');
          } else {
            this.tableNode.classList.remove('show-unsorted-icon');
          }
        }
      }

      // Initialize sortable table buttons
      window.addEventListener('load', function () {
        var sortableTables = document.querySelectorAll('table.sortable');
        for (var i = 0; i < sortableTables.length; i++) {
          new SortableTable(sortableTables[i]);
        }
      });
      </script>

user scripts =

[STYLES]
code style =sons-of-obsidian

body style =
	        body {width:max-content; min-width:50%; font-family: Courier New; font-size:16px; padding: 0px; margin:0px}

img style =
            img {vertical-align: top;}

h styles =
	        h1 {width:%100; margin-bottom:0em; text-align: left;}
	        h2 {width:%100; margin-bottom:0em; text-align: left; background-color:#e6e8f0; margin-left:-0.4em; padding-left:0.15em}
	        h3 {width:%100; margin-bottom:0em; text-align: left; background-color:#e6e8f0; margin-left:-0.4em; padding-left:0.15em}
	        h4 {width:%100; margin-bottom:0em; text-align: left; background-color:#e6e8f0; margin-left:-0.4em; padding-left:0.15em}
	        h5 {width:%100; margin-bottom:0em; text-align: left; background-color:#e6e8f0; margin-left:-0.4em; padding-left:0.15em}
	        h6 {width:%100; margin-bottom:0em; text-align: left; background-color:#e6e8f0; margin-left:-0.4em; padding-left:0.15em}


tab styles =
	        .tab {
	          overflow: hidden;
	          border: 1px solid #ccc;
	          background-color: #f1f1f1;
	        }

	        /* Style the buttons inside the tab */
	        .tab button {
	          background-color: inherit;
	          float: left;
	          border: none;
	          outline: none;
	          cursor: pointer;
	          padding: 14px 16px;
	          transition: 0.3s;
	          font-size: 17px;
	        }

	        /* Change background color of buttons on hover */
	        .tab button:hover {
	          background-color: #ddd;
	        }

	        /* Create an active/current tablink class */
	        .tab button.active {
	          background-color: #ccc;
	        }

	        /* Style the tab content */
	        .tabcontent {
	          padding: 6px 12px;
	          border: 1px solid #ccc;
	          border-top: none;
	        }

	        /* Style the close button */
	        .topright {
	          float: right;
	          cursor: pointer;
	          font-size: 28px;
	        }

	        .topright:hover {color: red;}

grid styles =
	        .grid-container {
	          display: inline-grid;
	          grid-column-gap: 10px;
	          grid-row-gap: 10px;
	          padding: 10px;
	          background-color: #e6e8f0;

	        }

	        .grid-item {
	          background-color: #f5f7ff;
	          border: 0px solid rgba(0, 0, 0, 0.8);
	          padding: 5px;
	          font-size: 20px;
	          text-align: center;
	          justify-self: left;
	          align-self: start;
	        }

p style =
	        p {max-width: 50vw; min-width: 100px; text-align: left;}

fold styles =

            .fold {
              background-color: #777;
              color: white;
              cursor: pointer;
              padding: 2px;
              margin: 0px;
              width: 100%;
              border: none;
              text-align: left;
              outline: none;
              font-size: 15px;
            }

            .active, .fold:hover {
              background-color: #555;
            }

            .fold:after {
              content: '\002B';
              color: white;
              font-weight: bold;
              float: left;
              margin-left: 5px;
            }

            .active:after {
              content: "\2212";
            }

            .foldcontent {
              padding: 0 18px;
              max-height: 0;
              overflow: hidden;
              transition: max-height 0.2s ease-out;
              background-color: #f1f1f1;
            }

table styles =

          table.sortable td,
          table.sortable th {
            padding: 0.125em 0.25em;
            width: 8em;
          }

          table.sortable th {
            font-weight: bold;
            border-bottom: thin solid #888;
            position: relative;
          }

          table.sortable th.no-sort {
            padding-top: 0.35em;
          }

          table.sortable th:nth-child(5) {
            width: 10em;
          }

          table.sortable th button {
            padding: 4px;
            margin: 1px;
            font-size: 100%;
            font-weight: bold;
            background: transparent;
            border: none;
            display: inline;
            right: 0;
            left: 0;
            top: 0;
            bottom: 0;
            width: 100%;
            text-align: left;
            outline: none;
            cursor: pointer;

          }

          table.sortable th button span {
            position: absolute;
            right: 4px;
          }

          table.sortable th[aria-sort="descending"] span::after {
            content: "▼";
            color: currentcolor;
            font-size: 100%;
            top: 0;
          }

          table.sortable th[aria-sort="ascending"] span::after {
            content: "▲";
            color: currentcolor;
            font-size: 100%;
            top: 0;
          }

          table.show-unsorted-icon th:not([aria-sort]) button span::after {
            content: "♢";
            color: currentcolor;
            font-size: 100%;
            position: relative;
            top: -3px;
            left: -4px;
          }

          table.sortable td.num {
            text-align: right;
          }

          table.sortable tbody tr:nth-child(odd) {
            background-color: #ddd;
          }

          /* Focus and hover styling */

          table.sortable th button:focus,
          table.sortable th button:hover {
            padding: 2px;
            border: 2px solid currentcolor;
            background-color: #e5f4ff;
          }

          table.sortable th button:focus span,
          table.sortable th button:hover span {
            right: 2px;
          }

          table.sortable th:not([aria-sort]) button:focus span::after,
          table.sortable th:not([aria-sort]) button:hover span::after {
            content: "▼";
            color: currentcolor;
            font-size: 100%;
            top: 0;
          }


user styles =
